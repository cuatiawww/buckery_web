
# PAYMENT MODELS 
# models.py

class Order(models.Model):
    STATUS_CHOICES = [
        ('PENDING', 'Menunggu Pembayaran'),
        ('UPLOADED', 'Bukti Pembayaran Diunggah'),
        ('CONFIRMED', 'Pembayaran Dikonfirmasi'),
        ('PROCESSING', 'Pesanan Diproses'),
        ('SHIPPING', 'Dalam Pengiriman'),
        ('DELIVERED', 'Pesanan Diterima'),
        ('CANCELLED', 'Dibatalkan'),
    ]

    DELIVERY_CHOICES = [
        ('pickup', 'Pick Up (ambil sendiri)'),
        ('local', 'Antar (hanya daerah karawang)'),
        ('gojek', 'Go-Jek, Grab, Shopee food'),
        ('courier', 'Jarak jauh (JNE, JNT, Paxel)'),
    ]

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    order_number = models.CharField(max_length=20, unique=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='PENDING')
    total_amount = models.DecimalField(max_digits=10, decimal_places=2)
    shipping_cost = models.DecimalField(max_digits=10, decimal_places=2)
    delivery_method = models.CharField(max_length=20, choices=DELIVERY_CHOICES)
    
    # Recipient Information
    recipient_name = models.CharField(max_length=255)
    recipient_phone = models.CharField(max_length=20)
    recipient_address = models.TextField()
    notes = models.TextField(blank=True)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Order #{self.order_number}"

class OrderItem(models.Model):
    order = models.ForeignKey(Order, related_name='items', on_delete=models.CASCADE)
    product = models.ForeignKey('Product', on_delete=models.CASCADE)
    quantity = models.IntegerField()
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return f"{self.quantity}x {self.product.name}"

class Payment(models.Model):
    order = models.OneToOneField(Order, on_delete=models.CASCADE)
    proof_of_payment = models.ImageField(upload_to='payment_proofs/')
    bank_name = models.CharField(max_length=50)
    account_name = models.CharField(max_length=255)
    payment_date = models.DateField()
    uploaded_at = models.DateTimeField(auto_now_add=True)
    confirmed_at = models.DateTimeField(null=True, blank=True)
    confirmed_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='confirmed_payments'
    )

    def __str__(self):
        return f"Payment for Order #{self.order.order_number}"

class OrderTracking(models.Model):
    order = models.ForeignKey(Order, related_name='tracking', on_delete=models.CASCADE)
    status = models.CharField(max_length=20, choices=Order.STATUS_CHOICES)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True
    )

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"Tracking for Order #{self.order.order_number}"


# PAYMENT SERIALIZATION
class OrderItemSerializer(serializers.ModelSerializer):
    product_name = serializers.CharField(source='product.name', read_only=True)
    product_image = serializers.ImageField(source='product.image', read_only=True)

    class Meta:
        model = OrderItem
        fields = ['id', 'product', 'product_name', 'product_image', 'quantity', 'price']

class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = ['id', 'proof_of_payment', 'bank_name', 'account_name', 
                 'payment_date', 'uploaded_at', 'confirmed_at']
        read_only_fields = ['confirmed_at', 'confirmed_by']

class OrderTrackingSerializer(serializers.ModelSerializer):
    status_display = serializers.CharField(source='get_status_display', read_only=True)

    class Meta:
        model = OrderTracking
        fields = ['id', 'status', 'status_display', 'description', 'created_at']
        read_only_fields = ['created_at', 'created_by']

class OrderSerializer(serializers.ModelSerializer):
    items = OrderItemSerializer(many=True, read_only=True)
    payment = PaymentSerializer(read_only=True)
    tracking = OrderTrackingSerializer(many=True, read_only=True)
    status_display = serializers.CharField(source='get_status_display', read_only=True)
    delivery_method_display = serializers.CharField(source='get_delivery_method_display', read_only=True)

    class Meta:
        model = Order
        fields = ['id', 'order_number', 'status', 'status_display', 
                 'total_amount', 'shipping_cost', 'delivery_method',
                 'delivery_method_display', 'recipient_name', 'recipient_phone',
                 'recipient_address', 'notes', 'created_at', 'updated_at',
                 'items', 'payment', 'tracking']
        read_only_fields = ['order_number', 'created_at', 'updated_at']